name: Build Image

on:
  workflow_call:
    inputs:
      id:
        description: Image ID
        required: true
        type: string
      image:
        description: Image name (repository logical name)
        required: true
        type: string
      context:
        description: Build context path
        required: true
        type: string
      tags:
        description: Newline-separated list of tags to apply to the manifest
        required: true
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        description: Docker Hub token
        required: true

permissions:
  contents: read
  packages: write

jobs:
  build-platform:
    name: 'Build (${{ matrix.platform.name }})'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux/amd64
            runner: ubuntu-24.04
            tag: linux-amd64
          - name: linux/arm64
            runner: ubuntu-24.04-arm
            tag: linux-arm64
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          platforms: ${{ matrix.platform.name }}
          tags: kula/${{ inputs.image }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

      - name: Export digest
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.id }}-${{ matrix.platform.tag }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-manifests:
    name: Merge Manifests
    needs: build-platform
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ inputs.id }}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          set -euo pipefail
          TAGS='${{ inputs.tags }}'
          if [ -z "$TAGS" ]; then
            echo "No tags provided for image, skipping" >&2
            exit 1
          fi

          # Convert newline-separated tags to -t arguments
          image_tags=$(printf '%s' "$TAGS" | awk '{print "-t "$0}' | xargs)
          echo "Creating manifest list with tags: $image_tags"

          # Build digest references for the repository (using first tag to get repo name)
          repo=$(printf '%s' "$TAGS" | head -n1 | cut -d: -f1)
          digest_refs=""
          for f in *; do
            digest_refs="$digest_refs ${repo}@sha256:${f}"
          done
          echo "Source digest references: $digest_refs"

          docker buildx imagetools create $image_tags $digest_refs

      - name: Inspect image
        run: |
          first_tag=$(printf '%s' '${{ inputs.tags }}' | head -n1)
          docker buildx imagetools inspect "$first_tag"
